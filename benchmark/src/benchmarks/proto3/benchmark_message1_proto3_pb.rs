// This file is generated by pecan 0.1.0, DO NOT EDIT!
// @generated
// source: benchmarks/proto3/benchmark_message1_proto3.proto

#![allow(non_upper_case_globals)]
#![allow(unused_imports)]

use pecan::{
    codec,
    EnumType,
    Message,
    Result,
    Buf,
    BufMut,
    CodedInputStream,
    CodedOutputStream,
    encoded,
};
use std::collections::HashMap;

pub static DESCRIPTOR: &[u8] = &[
    10, 49, 98, 101, 110, 99, 104, 109, 97, 114, 107, 115, 47, 112, 114, 111,
    116, 111, 51, 47, 98, 101, 110, 99, 104, 109, 97, 114, 107, 95, 109, 101,
    115, 115, 97, 103, 101, 49, 95, 112, 114, 111, 116, 111, 51, 46, 112, 114,
    111, 116, 111, 18, 17, 98, 101, 110, 99, 104, 109, 97, 114, 107, 115, 46,
    112, 114, 111, 116, 111, 51, 66, 37, 10, 30, 99, 111, 109, 46, 103, 111,
    111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 98, 101,
    110, 99, 104, 109, 97, 114, 107, 115, 72, 1, 248, 1, 1, 98, 6, 112,
    114, 111, 116, 111, 51,
];

#[derive(Clone, Debug, Default, PartialEq)]
pub struct GoogleMessage1 {
    pub field1: String,
    pub field9: String,
    pub field18: String,
    pub field80: bool,
    pub field81: bool,
    pub field2: i32,
    pub field3: i32,
    pub field280: i32,
    pub field6: i32,
    pub field22: i64,
    pub field4: String,
    field5: Vec<u64>,
    pub field59: bool,
    pub field7: String,
    pub field16: i32,
    pub field130: i32,
    pub field12: bool,
    pub field17: bool,
    pub field13: bool,
    pub field14: bool,
    pub field104: i32,
    pub field100: i32,
    pub field101: i32,
    pub field102: String,
    pub field103: String,
    pub field29: i32,
    pub field30: bool,
    pub field60: i32,
    pub field271: i32,
    pub field272: i32,
    pub field150: i32,
    pub field23: i32,
    pub field24: bool,
    pub field25: i32,
    field15: Option<GoogleMessage1SubMessage>,
    pub field78: bool,
    pub field67: i32,
    pub field68: i32,
    pub field128: i32,
    pub field129: String,
    pub field131: i32,
    cache_size: u32,
    unknown: Vec<u8>,
}

impl Message for GoogleMessage1 {
    fn merge_from(&mut self, s: &mut CodedInputStream<impl Buf>) -> Result<()> {
        loop {
            let tag = s.read_tag()?;
            match tag {
                10 => self.field1 = s.read_string()?,
                74 => self.field9 = s.read_string()?,
                146 => self.field18 = s.read_string()?,
                640 => self.field80 = s.read_bool()?,
                648 => self.field81 = s.read_bool()?,
                16 => self.field2 = s.read_var_i32()?,
                24 => self.field3 = s.read_var_i32()?,
                2240 => self.field280 = s.read_var_i32()?,
                48 => self.field6 = s.read_var_i32()?,
                176 => self.field22 = s.read_var_i64()?,
                34 => self.field4 = s.read_string()?,
                41 => self.field5.push(s.read_fixed64()?),
                42 => s.read_fixed64_array(&mut self.field5)?,
                472 => self.field59 = s.read_bool()?,
                58 => self.field7 = s.read_string()?,
                128 => self.field16 = s.read_var_i32()?,
                1040 => self.field130 = s.read_var_i32()?,
                96 => self.field12 = s.read_bool()?,
                136 => self.field17 = s.read_bool()?,
                104 => self.field13 = s.read_bool()?,
                112 => self.field14 = s.read_bool()?,
                832 => self.field104 = s.read_var_i32()?,
                800 => self.field100 = s.read_var_i32()?,
                808 => self.field101 = s.read_var_i32()?,
                818 => self.field102 = s.read_string()?,
                826 => self.field103 = s.read_string()?,
                232 => self.field29 = s.read_var_i32()?,
                240 => self.field30 = s.read_bool()?,
                480 => self.field60 = s.read_var_i32()?,
                2168 => self.field271 = s.read_var_i32()?,
                2176 => self.field272 = s.read_var_i32()?,
                1200 => self.field150 = s.read_var_i32()?,
                184 => self.field23 = s.read_var_i32()?,
                192 => self.field24 = s.read_bool()?,
                200 => self.field25 = s.read_var_i32()?,
                122 => {
                    let msg = self.field15.get_or_insert_with(Default::default);
                    s.read_message(msg)?;
                }
                624 => self.field78 = s.read_bool()?,
                536 => self.field67 = s.read_var_i32()?,
                544 => self.field68 = s.read_var_i32()?,
                1024 => self.field128 = s.read_var_i32()?,
                1034 => self.field129 = s.read_string()?,
                1048 => self.field131 = s.read_var_i32()?,
                0 => return Ok(()),
                _ => s.skip_field(&mut self.unknown, tag)?,
            }
        }
    }

    fn write_to(&self, s: &mut CodedOutputStream<impl BufMut>) -> Result<()> {
        if !&self.field1.is_empty() {
            s.write_raw_1_byte([10])?;
            s.write_string(&self.field1)?;
        }
        if !&self.field9.is_empty() {
            s.write_raw_1_byte([74])?;
            s.write_string(&self.field9)?;
        }
        if !&self.field18.is_empty() {
            s.write_raw_2_byte([146, 1])?;
            s.write_string(&self.field18)?;
        }
        if self.field80 {
            s.write_raw_2_byte([128, 5])?;
            s.write_bool(self.field80)?;
        }
        if self.field81 {
            s.write_raw_2_byte([136, 5])?;
            s.write_bool(self.field81)?;
        }
        if 0 != self.field2 {
            s.write_raw_1_byte([16])?;
            s.write_var_i32(self.field2)?;
        }
        if 0 != self.field3 {
            s.write_raw_1_byte([24])?;
            s.write_var_i32(self.field3)?;
        }
        if 0 != self.field280 {
            s.write_raw_2_byte([192, 17])?;
            s.write_var_i32(self.field280)?;
        }
        if 0 != self.field6 {
            s.write_raw_1_byte([48])?;
            s.write_var_i32(self.field6)?;
        }
        if 0 != self.field22 {
            s.write_raw_2_byte([176, 1])?;
            s.write_var_i64(self.field22)?;
        }
        if !&self.field4.is_empty() {
            s.write_raw_1_byte([34])?;
            s.write_string(&self.field4)?;
        }
        if !self.field5.is_empty() {
            s.write_raw_1_byte([42])?;
            s.write_fixed64_array(&self.field5)?;
        }
        if self.field59 {
            s.write_raw_2_byte([216, 3])?;
            s.write_bool(self.field59)?;
        }
        if !&self.field7.is_empty() {
            s.write_raw_1_byte([58])?;
            s.write_string(&self.field7)?;
        }
        if 0 != self.field16 {
            s.write_raw_2_byte([128, 1])?;
            s.write_var_i32(self.field16)?;
        }
        if 0 != self.field130 {
            s.write_raw_2_byte([144, 8])?;
            s.write_var_i32(self.field130)?;
        }
        if self.field12 {
            s.write_raw_1_byte([96])?;
            s.write_bool(self.field12)?;
        }
        if self.field17 {
            s.write_raw_2_byte([136, 1])?;
            s.write_bool(self.field17)?;
        }
        if self.field13 {
            s.write_raw_1_byte([104])?;
            s.write_bool(self.field13)?;
        }
        if self.field14 {
            s.write_raw_1_byte([112])?;
            s.write_bool(self.field14)?;
        }
        if 0 != self.field104 {
            s.write_raw_2_byte([192, 6])?;
            s.write_var_i32(self.field104)?;
        }
        if 0 != self.field100 {
            s.write_raw_2_byte([160, 6])?;
            s.write_var_i32(self.field100)?;
        }
        if 0 != self.field101 {
            s.write_raw_2_byte([168, 6])?;
            s.write_var_i32(self.field101)?;
        }
        if !&self.field102.is_empty() {
            s.write_raw_2_byte([178, 6])?;
            s.write_string(&self.field102)?;
        }
        if !&self.field103.is_empty() {
            s.write_raw_2_byte([186, 6])?;
            s.write_string(&self.field103)?;
        }
        if 0 != self.field29 {
            s.write_raw_2_byte([232, 1])?;
            s.write_var_i32(self.field29)?;
        }
        if self.field30 {
            s.write_raw_2_byte([240, 1])?;
            s.write_bool(self.field30)?;
        }
        if 0 != self.field60 {
            s.write_raw_2_byte([224, 3])?;
            s.write_var_i32(self.field60)?;
        }
        if 0 != self.field271 {
            s.write_raw_2_byte([248, 16])?;
            s.write_var_i32(self.field271)?;
        }
        if 0 != self.field272 {
            s.write_raw_2_byte([128, 17])?;
            s.write_var_i32(self.field272)?;
        }
        if 0 != self.field150 {
            s.write_raw_2_byte([176, 9])?;
            s.write_var_i32(self.field150)?;
        }
        if 0 != self.field23 {
            s.write_raw_2_byte([184, 1])?;
            s.write_var_i32(self.field23)?;
        }
        if self.field24 {
            s.write_raw_2_byte([192, 1])?;
            s.write_bool(self.field24)?;
        }
        if 0 != self.field25 {
            s.write_raw_2_byte([200, 1])?;
            s.write_var_i32(self.field25)?;
        }
        if let Some(v) = &self.field15 {
            s.write_raw_1_byte([122])?;
            s.write_message(v)?;
        }
        if self.field78 {
            s.write_raw_2_byte([240, 4])?;
            s.write_bool(self.field78)?;
        }
        if 0 != self.field67 {
            s.write_raw_2_byte([152, 4])?;
            s.write_var_i32(self.field67)?;
        }
        if 0 != self.field68 {
            s.write_raw_2_byte([160, 4])?;
            s.write_var_i32(self.field68)?;
        }
        if 0 != self.field128 {
            s.write_raw_2_byte([128, 8])?;
            s.write_var_i32(self.field128)?;
        }
        if !&self.field129.is_empty() {
            s.write_raw_2_byte([138, 8])?;
            s.write_string(&self.field129)?;
        }
        if 0 != self.field131 {
            s.write_raw_2_byte([152, 8])?;
            s.write_var_i32(self.field131)?;
        }
        if !self.unknown.is_empty() {
            s.write_unknown(&self.unknown)?;
        }
        Ok(())
    }

    fn len(&self) -> usize {
        let mut n = self.unknown.len();
        if !self.field1.is_empty() {
            n += {
                let l = self.field1.len();
                1 + codec::varint_u32_bytes_len(l as u32) as usize + l
            };
        }
        if !self.field9.is_empty() {
            n += {
                let l = self.field9.len();
                1 + codec::varint_u32_bytes_len(l as u32) as usize + l
            };
        }
        if !self.field18.is_empty() {
            n += {
                let l = self.field18.len();
                2 + codec::varint_u32_bytes_len(l as u32) as usize + l
            };
        }
        if self.field80 {
            n += 3;
        }
        if self.field81 {
            n += 3;
        }
        if 0 != self.field2 {
            n += codec::varint_i64_bytes_len(self.field2 as i64) as usize;
        }
        if 0 != self.field3 {
            n += codec::varint_i64_bytes_len(self.field3 as i64) as usize;
        }
        if 0 != self.field280 {
            n += codec::varint_i64_bytes_len(self.field280 as i64) as usize;
        }
        if 0 != self.field6 {
            n += codec::varint_i64_bytes_len(self.field6 as i64) as usize;
        }
        if 0 != self.field22 {
            n += codec::varint_i64_bytes_len(self.field22) as usize;
        }
        if !self.field4.is_empty() {
            n += {
                let l = self.field4.len();
                1 + codec::varint_u32_bytes_len(l as u32) as usize + l
            };
        }
        if !self.field5.is_empty() {
            n += {
                let l = self.field5.len() * 8;
                n + 1 + codec::varint_u32_bytes_len(l as u32) as usize + l
            };
        }
        if self.field59 {
            n += 3;
        }
        if !self.field7.is_empty() {
            n += {
                let l = self.field7.len();
                1 + codec::varint_u32_bytes_len(l as u32) as usize + l
            };
        }
        if 0 != self.field16 {
            n += codec::varint_i64_bytes_len(self.field16 as i64) as usize;
        }
        if 0 != self.field130 {
            n += codec::varint_i64_bytes_len(self.field130 as i64) as usize;
        }
        if self.field12 {
            n += 2;
        }
        if self.field17 {
            n += 3;
        }
        if self.field13 {
            n += 2;
        }
        if self.field14 {
            n += 2;
        }
        if 0 != self.field104 {
            n += codec::varint_i64_bytes_len(self.field104 as i64) as usize;
        }
        if 0 != self.field100 {
            n += codec::varint_i64_bytes_len(self.field100 as i64) as usize;
        }
        if 0 != self.field101 {
            n += codec::varint_i64_bytes_len(self.field101 as i64) as usize;
        }
        if !self.field102.is_empty() {
            n += {
                let l = self.field102.len();
                2 + codec::varint_u32_bytes_len(l as u32) as usize + l
            };
        }
        if !self.field103.is_empty() {
            n += {
                let l = self.field103.len();
                2 + codec::varint_u32_bytes_len(l as u32) as usize + l
            };
        }
        if 0 != self.field29 {
            n += codec::varint_i64_bytes_len(self.field29 as i64) as usize;
        }
        if self.field30 {
            n += 3;
        }
        if 0 != self.field60 {
            n += codec::varint_i64_bytes_len(self.field60 as i64) as usize;
        }
        if 0 != self.field271 {
            n += codec::varint_i64_bytes_len(self.field271 as i64) as usize;
        }
        if 0 != self.field272 {
            n += codec::varint_i64_bytes_len(self.field272 as i64) as usize;
        }
        if 0 != self.field150 {
            n += codec::varint_i64_bytes_len(self.field150 as i64) as usize;
        }
        if 0 != self.field23 {
            n += codec::varint_i64_bytes_len(self.field23 as i64) as usize;
        }
        if self.field24 {
            n += 3;
        }
        if 0 != self.field25 {
            n += codec::varint_i64_bytes_len(self.field25 as i64) as usize;
        }
        if let Some(v) = &self.field15 {
            n += {
                let l = v.len();
                1 + codec::varint_u32_bytes_len(l as u32) as usize + l
            };
        }
        if self.field78 {
            n += 3;
        }
        if 0 != self.field67 {
            n += codec::varint_i64_bytes_len(self.field67 as i64) as usize;
        }
        if 0 != self.field68 {
            n += codec::varint_i64_bytes_len(self.field68 as i64) as usize;
        }
        if 0 != self.field128 {
            n += codec::varint_i64_bytes_len(self.field128 as i64) as usize;
        }
        if !self.field129.is_empty() {
            n += {
                let l = self.field129.len();
                2 + codec::varint_u32_bytes_len(l as u32) as usize + l
            };
        }
        if 0 != self.field131 {
            n += codec::varint_i64_bytes_len(self.field131 as i64) as usize;
        }
        n
    }
}

impl GoogleMessage1 {
    pub const fn new() -> GoogleMessage1 {
        GoogleMessage1 {
            field1: String::new(),
            field9: String::new(),
            field18: String::new(),
            field80: false,
            field81: false,
            field2: 0,
            field3: 0,
            field280: 0,
            field6: 0,
            field22: 0,
            field4: String::new(),
            field5: Vec::new(),
            field59: false,
            field7: String::new(),
            field16: 0,
            field130: 0,
            field12: false,
            field17: false,
            field13: false,
            field14: false,
            field104: 0,
            field100: 0,
            field101: 0,
            field102: String::new(),
            field103: String::new(),
            field29: 0,
            field30: false,
            field60: 0,
            field271: 0,
            field272: 0,
            field150: 0,
            field23: 0,
            field24: false,
            field25: 0,
            field15: None,
            field78: false,
            field67: 0,
            field68: 0,
            field128: 0,
            field129: String::new(),
            field131: 0,
            cache_size: 0,
            unknown: Vec::new(),
        }
    }

    pub fn default_instance() -> &'static GoogleMessage1 {
        static DEFAULT: GoogleMessage1 = GoogleMessage1::new();
        &DEFAULT
    }

    pub fn field1(&self) -> &str { &self.field1 }

    pub fn clear_field1(&mut self) { self.field1 = Default::default(); }

    pub fn set_field1(&mut self, v: String) { self.field1 = v; }

    pub fn field1_mut(&mut self) -> &mut String { &mut self.field1 }

    pub fn field9(&self) -> &str { &self.field9 }

    pub fn clear_field9(&mut self) { self.field9 = Default::default(); }

    pub fn set_field9(&mut self, v: String) { self.field9 = v; }

    pub fn field9_mut(&mut self) -> &mut String { &mut self.field9 }

    pub fn field18(&self) -> &str { &self.field18 }

    pub fn clear_field18(&mut self) { self.field18 = Default::default(); }

    pub fn set_field18(&mut self, v: String) { self.field18 = v; }

    pub fn field18_mut(&mut self) -> &mut String { &mut self.field18 }

    pub fn field80(&self) -> bool { self.field80 }

    pub fn clear_field80(&mut self) { self.field80 = false; }

    pub fn set_field80(&mut self, v: bool) { self.field80 = v; }

    pub fn field81(&self) -> bool { self.field81 }

    pub fn clear_field81(&mut self) { self.field81 = false; }

    pub fn set_field81(&mut self, v: bool) { self.field81 = v; }

    pub fn field2(&self) -> i32 { self.field2 }

    pub fn clear_field2(&mut self) { self.field2 = 0; }

    pub fn set_field2(&mut self, v: i32) { self.field2 = v; }

    pub fn field3(&self) -> i32 { self.field3 }

    pub fn clear_field3(&mut self) { self.field3 = 0; }

    pub fn set_field3(&mut self, v: i32) { self.field3 = v; }

    pub fn field280(&self) -> i32 { self.field280 }

    pub fn clear_field280(&mut self) { self.field280 = 0; }

    pub fn set_field280(&mut self, v: i32) { self.field280 = v; }

    pub fn field6(&self) -> i32 { self.field6 }

    pub fn clear_field6(&mut self) { self.field6 = 0; }

    pub fn set_field6(&mut self, v: i32) { self.field6 = v; }

    pub fn field22(&self) -> i64 { self.field22 }

    pub fn clear_field22(&mut self) { self.field22 = 0; }

    pub fn set_field22(&mut self, v: i64) { self.field22 = v; }

    pub fn field4(&self) -> &str { &self.field4 }

    pub fn clear_field4(&mut self) { self.field4 = Default::default(); }

    pub fn set_field4(&mut self, v: String) { self.field4 = v; }

    pub fn field4_mut(&mut self) -> &mut String { &mut self.field4 }

    pub fn field5(&self) -> &[u64] { &self.field5 }

    pub fn clear_field5(&mut self) { self.field5.clear(); }

    pub fn set_field5(&mut self, v: impl Into<Vec<u64>>) { self.field5 = v.into(); }

    pub fn field5_mut(&mut self) -> &mut Vec<u64> { &mut self.field5 }

    pub fn field59(&self) -> bool { self.field59 }

    pub fn clear_field59(&mut self) { self.field59 = false; }

    pub fn set_field59(&mut self, v: bool) { self.field59 = v; }

    pub fn field7(&self) -> &str { &self.field7 }

    pub fn clear_field7(&mut self) { self.field7 = Default::default(); }

    pub fn set_field7(&mut self, v: String) { self.field7 = v; }

    pub fn field7_mut(&mut self) -> &mut String { &mut self.field7 }

    pub fn field16(&self) -> i32 { self.field16 }

    pub fn clear_field16(&mut self) { self.field16 = 0; }

    pub fn set_field16(&mut self, v: i32) { self.field16 = v; }

    pub fn field130(&self) -> i32 { self.field130 }

    pub fn clear_field130(&mut self) { self.field130 = 0; }

    pub fn set_field130(&mut self, v: i32) { self.field130 = v; }

    pub fn field12(&self) -> bool { self.field12 }

    pub fn clear_field12(&mut self) { self.field12 = false; }

    pub fn set_field12(&mut self, v: bool) { self.field12 = v; }

    pub fn field17(&self) -> bool { self.field17 }

    pub fn clear_field17(&mut self) { self.field17 = false; }

    pub fn set_field17(&mut self, v: bool) { self.field17 = v; }

    pub fn field13(&self) -> bool { self.field13 }

    pub fn clear_field13(&mut self) { self.field13 = false; }

    pub fn set_field13(&mut self, v: bool) { self.field13 = v; }

    pub fn field14(&self) -> bool { self.field14 }

    pub fn clear_field14(&mut self) { self.field14 = false; }

    pub fn set_field14(&mut self, v: bool) { self.field14 = v; }

    pub fn field104(&self) -> i32 { self.field104 }

    pub fn clear_field104(&mut self) { self.field104 = 0; }

    pub fn set_field104(&mut self, v: i32) { self.field104 = v; }

    pub fn field100(&self) -> i32 { self.field100 }

    pub fn clear_field100(&mut self) { self.field100 = 0; }

    pub fn set_field100(&mut self, v: i32) { self.field100 = v; }

    pub fn field101(&self) -> i32 { self.field101 }

    pub fn clear_field101(&mut self) { self.field101 = 0; }

    pub fn set_field101(&mut self, v: i32) { self.field101 = v; }

    pub fn field102(&self) -> &str { &self.field102 }

    pub fn clear_field102(&mut self) { self.field102 = Default::default(); }

    pub fn set_field102(&mut self, v: String) { self.field102 = v; }

    pub fn field102_mut(&mut self) -> &mut String { &mut self.field102 }

    pub fn field103(&self) -> &str { &self.field103 }

    pub fn clear_field103(&mut self) { self.field103 = Default::default(); }

    pub fn set_field103(&mut self, v: String) { self.field103 = v; }

    pub fn field103_mut(&mut self) -> &mut String { &mut self.field103 }

    pub fn field29(&self) -> i32 { self.field29 }

    pub fn clear_field29(&mut self) { self.field29 = 0; }

    pub fn set_field29(&mut self, v: i32) { self.field29 = v; }

    pub fn field30(&self) -> bool { self.field30 }

    pub fn clear_field30(&mut self) { self.field30 = false; }

    pub fn set_field30(&mut self, v: bool) { self.field30 = v; }

    pub fn field60(&self) -> i32 { self.field60 }

    pub fn clear_field60(&mut self) { self.field60 = 0; }

    pub fn set_field60(&mut self, v: i32) { self.field60 = v; }

    pub fn field271(&self) -> i32 { self.field271 }

    pub fn clear_field271(&mut self) { self.field271 = 0; }

    pub fn set_field271(&mut self, v: i32) { self.field271 = v; }

    pub fn field272(&self) -> i32 { self.field272 }

    pub fn clear_field272(&mut self) { self.field272 = 0; }

    pub fn set_field272(&mut self, v: i32) { self.field272 = v; }

    pub fn field150(&self) -> i32 { self.field150 }

    pub fn clear_field150(&mut self) { self.field150 = 0; }

    pub fn set_field150(&mut self, v: i32) { self.field150 = v; }

    pub fn field23(&self) -> i32 { self.field23 }

    pub fn clear_field23(&mut self) { self.field23 = 0; }

    pub fn set_field23(&mut self, v: i32) { self.field23 = v; }

    pub fn field24(&self) -> bool { self.field24 }

    pub fn clear_field24(&mut self) { self.field24 = false; }

    pub fn set_field24(&mut self, v: bool) { self.field24 = v; }

    pub fn field25(&self) -> i32 { self.field25 }

    pub fn clear_field25(&mut self) { self.field25 = 0; }

    pub fn set_field25(&mut self, v: i32) { self.field25 = v; }

    pub fn field15(&self) -> &GoogleMessage1SubMessage {
        self.field15.as_ref().unwrap_or_else(|| GoogleMessage1SubMessage::default_instance())
    }

    pub fn clear_field15(&mut self) { self.field15 = None; }

    pub fn has_field15(&self) -> bool { self.field15.is_some() }

    pub fn set_field15(&mut self, v: GoogleMessage1SubMessage) { self.field15 = Some(v); }

    pub fn field15_mut(&mut self) -> &mut GoogleMessage1SubMessage {
        self.field15.get_or_insert_with(Default::default)
    }

    pub fn field78(&self) -> bool { self.field78 }

    pub fn clear_field78(&mut self) { self.field78 = false; }

    pub fn set_field78(&mut self, v: bool) { self.field78 = v; }

    pub fn field67(&self) -> i32 { self.field67 }

    pub fn clear_field67(&mut self) { self.field67 = 0; }

    pub fn set_field67(&mut self, v: i32) { self.field67 = v; }

    pub fn field68(&self) -> i32 { self.field68 }

    pub fn clear_field68(&mut self) { self.field68 = 0; }

    pub fn set_field68(&mut self, v: i32) { self.field68 = v; }

    pub fn field128(&self) -> i32 { self.field128 }

    pub fn clear_field128(&mut self) { self.field128 = 0; }

    pub fn set_field128(&mut self, v: i32) { self.field128 = v; }

    pub fn field129(&self) -> &str { &self.field129 }

    pub fn clear_field129(&mut self) { self.field129 = Default::default(); }

    pub fn set_field129(&mut self, v: String) { self.field129 = v; }

    pub fn field129_mut(&mut self) -> &mut String { &mut self.field129 }

    pub fn field131(&self) -> i32 { self.field131 }

    pub fn clear_field131(&mut self) { self.field131 = 0; }

    pub fn set_field131(&mut self, v: i32) { self.field131 = v; }
}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct GoogleMessage1SubMessage {
    pub field1: i32,
    pub field2: i32,
    pub field3: i32,
    pub field15: String,
    pub field12: bool,
    pub field13: i64,
    pub field14: i64,
    pub field16: i32,
    pub field19: i32,
    pub field20: bool,
    pub field28: bool,
    pub field21: u64,
    pub field22: i32,
    pub field23: bool,
    pub field206: bool,
    pub field203: u32,
    pub field204: i32,
    pub field205: String,
    pub field207: u64,
    pub field300: u64,
    cache_size: u32,
    unknown: Vec<u8>,
}

impl Message for GoogleMessage1SubMessage {
    fn merge_from(&mut self, s: &mut CodedInputStream<impl Buf>) -> Result<()> {
        loop {
            let tag = s.read_tag()?;
            match tag {
                8 => self.field1 = s.read_var_i32()?,
                16 => self.field2 = s.read_var_i32()?,
                24 => self.field3 = s.read_var_i32()?,
                122 => self.field15 = s.read_string()?,
                96 => self.field12 = s.read_bool()?,
                104 => self.field13 = s.read_var_i64()?,
                112 => self.field14 = s.read_var_i64()?,
                128 => self.field16 = s.read_var_i32()?,
                152 => self.field19 = s.read_var_i32()?,
                160 => self.field20 = s.read_bool()?,
                224 => self.field28 = s.read_bool()?,
                169 => self.field21 = s.read_fixed64()?,
                176 => self.field22 = s.read_var_i32()?,
                184 => self.field23 = s.read_bool()?,
                1648 => self.field206 = s.read_bool()?,
                1629 => self.field203 = s.read_fixed32()?,
                1632 => self.field204 = s.read_var_i32()?,
                1642 => self.field205 = s.read_string()?,
                1656 => self.field207 = s.read_var_u64()?,
                2400 => self.field300 = s.read_var_u64()?,
                0 => return Ok(()),
                _ => s.skip_field(&mut self.unknown, tag)?,
            }
        }
    }

    fn write_to(&self, s: &mut CodedOutputStream<impl BufMut>) -> Result<()> {
        if 0 != self.field1 {
            s.write_raw_1_byte([8])?;
            s.write_var_i32(self.field1)?;
        }
        if 0 != self.field2 {
            s.write_raw_1_byte([16])?;
            s.write_var_i32(self.field2)?;
        }
        if 0 != self.field3 {
            s.write_raw_1_byte([24])?;
            s.write_var_i32(self.field3)?;
        }
        if !&self.field15.is_empty() {
            s.write_raw_1_byte([122])?;
            s.write_string(&self.field15)?;
        }
        if self.field12 {
            s.write_raw_1_byte([96])?;
            s.write_bool(self.field12)?;
        }
        if 0 != self.field13 {
            s.write_raw_1_byte([104])?;
            s.write_var_i64(self.field13)?;
        }
        if 0 != self.field14 {
            s.write_raw_1_byte([112])?;
            s.write_var_i64(self.field14)?;
        }
        if 0 != self.field16 {
            s.write_raw_2_byte([128, 1])?;
            s.write_var_i32(self.field16)?;
        }
        if 0 != self.field19 {
            s.write_raw_2_byte([152, 1])?;
            s.write_var_i32(self.field19)?;
        }
        if self.field20 {
            s.write_raw_2_byte([160, 1])?;
            s.write_bool(self.field20)?;
        }
        if self.field28 {
            s.write_raw_2_byte([224, 1])?;
            s.write_bool(self.field28)?;
        }
        if 0 != self.field21 {
            s.write_raw_2_byte([169, 1])?;
            s.write_fixed64(self.field21)?;
        }
        if 0 != self.field22 {
            s.write_raw_2_byte([176, 1])?;
            s.write_var_i32(self.field22)?;
        }
        if self.field23 {
            s.write_raw_2_byte([184, 1])?;
            s.write_bool(self.field23)?;
        }
        if self.field206 {
            s.write_raw_2_byte([240, 12])?;
            s.write_bool(self.field206)?;
        }
        if 0 != self.field203 {
            s.write_raw_2_byte([221, 12])?;
            s.write_fixed32(self.field203)?;
        }
        if 0 != self.field204 {
            s.write_raw_2_byte([224, 12])?;
            s.write_var_i32(self.field204)?;
        }
        if !&self.field205.is_empty() {
            s.write_raw_2_byte([234, 12])?;
            s.write_string(&self.field205)?;
        }
        if 0 != self.field207 {
            s.write_raw_2_byte([248, 12])?;
            s.write_var_u64(self.field207)?;
        }
        if 0 != self.field300 {
            s.write_raw_2_byte([224, 18])?;
            s.write_var_u64(self.field300)?;
        }
        if !self.unknown.is_empty() {
            s.write_unknown(&self.unknown)?;
        }
        Ok(())
    }

    fn len(&self) -> usize {
        let mut n = self.unknown.len();
        if 0 != self.field1 {
            n += codec::varint_i64_bytes_len(self.field1 as i64) as usize;
        }
        if 0 != self.field2 {
            n += codec::varint_i64_bytes_len(self.field2 as i64) as usize;
        }
        if 0 != self.field3 {
            n += codec::varint_i64_bytes_len(self.field3 as i64) as usize;
        }
        if !self.field15.is_empty() {
            n += {
                let l = self.field15.len();
                1 + codec::varint_u32_bytes_len(l as u32) as usize + l
            };
        }
        if self.field12 {
            n += 2;
        }
        if 0 != self.field13 {
            n += codec::varint_i64_bytes_len(self.field13) as usize;
        }
        if 0 != self.field14 {
            n += codec::varint_i64_bytes_len(self.field14) as usize;
        }
        if 0 != self.field16 {
            n += codec::varint_i64_bytes_len(self.field16 as i64) as usize;
        }
        if 0 != self.field19 {
            n += codec::varint_i64_bytes_len(self.field19 as i64) as usize;
        }
        if self.field20 {
            n += 3;
        }
        if self.field28 {
            n += 3;
        }
        if 0 != self.field21 {
            n += 10;
        }
        if 0 != self.field22 {
            n += codec::varint_i64_bytes_len(self.field22 as i64) as usize;
        }
        if self.field23 {
            n += 3;
        }
        if self.field206 {
            n += 3;
        }
        if 0 != self.field203 {
            n += 6;
        }
        if 0 != self.field204 {
            n += codec::varint_i64_bytes_len(self.field204 as i64) as usize;
        }
        if !self.field205.is_empty() {
            n += {
                let l = self.field205.len();
                2 + codec::varint_u32_bytes_len(l as u32) as usize + l
            };
        }
        if 0 != self.field207 {
            n += codec::varint_u64_bytes_len(self.field207) as usize;
        }
        if 0 != self.field300 {
            n += codec::varint_u64_bytes_len(self.field300) as usize;
        }
        n
    }
}

impl GoogleMessage1SubMessage {
    pub const fn new() -> GoogleMessage1SubMessage {
        GoogleMessage1SubMessage {
            field1: 0,
            field2: 0,
            field3: 0,
            field15: String::new(),
            field12: false,
            field13: 0,
            field14: 0,
            field16: 0,
            field19: 0,
            field20: false,
            field28: false,
            field21: 0,
            field22: 0,
            field23: false,
            field206: false,
            field203: 0,
            field204: 0,
            field205: String::new(),
            field207: 0,
            field300: 0,
            cache_size: 0,
            unknown: Vec::new(),
        }
    }

    pub fn default_instance() -> &'static GoogleMessage1SubMessage {
        static DEFAULT: GoogleMessage1SubMessage = GoogleMessage1SubMessage::new();
        &DEFAULT
    }

    pub fn field1(&self) -> i32 { self.field1 }

    pub fn clear_field1(&mut self) { self.field1 = 0; }

    pub fn set_field1(&mut self, v: i32) { self.field1 = v; }

    pub fn field2(&self) -> i32 { self.field2 }

    pub fn clear_field2(&mut self) { self.field2 = 0; }

    pub fn set_field2(&mut self, v: i32) { self.field2 = v; }

    pub fn field3(&self) -> i32 { self.field3 }

    pub fn clear_field3(&mut self) { self.field3 = 0; }

    pub fn set_field3(&mut self, v: i32) { self.field3 = v; }

    pub fn field15(&self) -> &str { &self.field15 }

    pub fn clear_field15(&mut self) { self.field15 = Default::default(); }

    pub fn set_field15(&mut self, v: String) { self.field15 = v; }

    pub fn field15_mut(&mut self) -> &mut String { &mut self.field15 }

    pub fn field12(&self) -> bool { self.field12 }

    pub fn clear_field12(&mut self) { self.field12 = false; }

    pub fn set_field12(&mut self, v: bool) { self.field12 = v; }

    pub fn field13(&self) -> i64 { self.field13 }

    pub fn clear_field13(&mut self) { self.field13 = 0; }

    pub fn set_field13(&mut self, v: i64) { self.field13 = v; }

    pub fn field14(&self) -> i64 { self.field14 }

    pub fn clear_field14(&mut self) { self.field14 = 0; }

    pub fn set_field14(&mut self, v: i64) { self.field14 = v; }

    pub fn field16(&self) -> i32 { self.field16 }

    pub fn clear_field16(&mut self) { self.field16 = 0; }

    pub fn set_field16(&mut self, v: i32) { self.field16 = v; }

    pub fn field19(&self) -> i32 { self.field19 }

    pub fn clear_field19(&mut self) { self.field19 = 0; }

    pub fn set_field19(&mut self, v: i32) { self.field19 = v; }

    pub fn field20(&self) -> bool { self.field20 }

    pub fn clear_field20(&mut self) { self.field20 = false; }

    pub fn set_field20(&mut self, v: bool) { self.field20 = v; }

    pub fn field28(&self) -> bool { self.field28 }

    pub fn clear_field28(&mut self) { self.field28 = false; }

    pub fn set_field28(&mut self, v: bool) { self.field28 = v; }

    pub fn field21(&self) -> u64 { self.field21 }

    pub fn clear_field21(&mut self) { self.field21 = 0; }

    pub fn set_field21(&mut self, v: u64) { self.field21 = v; }

    pub fn field22(&self) -> i32 { self.field22 }

    pub fn clear_field22(&mut self) { self.field22 = 0; }

    pub fn set_field22(&mut self, v: i32) { self.field22 = v; }

    pub fn field23(&self) -> bool { self.field23 }

    pub fn clear_field23(&mut self) { self.field23 = false; }

    pub fn set_field23(&mut self, v: bool) { self.field23 = v; }

    pub fn field206(&self) -> bool { self.field206 }

    pub fn clear_field206(&mut self) { self.field206 = false; }

    pub fn set_field206(&mut self, v: bool) { self.field206 = v; }

    pub fn field203(&self) -> u32 { self.field203 }

    pub fn clear_field203(&mut self) { self.field203 = 0; }

    pub fn set_field203(&mut self, v: u32) { self.field203 = v; }

    pub fn field204(&self) -> i32 { self.field204 }

    pub fn clear_field204(&mut self) { self.field204 = 0; }

    pub fn set_field204(&mut self, v: i32) { self.field204 = v; }

    pub fn field205(&self) -> &str { &self.field205 }

    pub fn clear_field205(&mut self) { self.field205 = Default::default(); }

    pub fn set_field205(&mut self, v: String) { self.field205 = v; }

    pub fn field205_mut(&mut self) -> &mut String { &mut self.field205 }

    pub fn field207(&self) -> u64 { self.field207 }

    pub fn clear_field207(&mut self) { self.field207 = 0; }

    pub fn set_field207(&mut self, v: u64) { self.field207 = v; }

    pub fn field300(&self) -> u64 { self.field300 }

    pub fn clear_field300(&mut self) { self.field300 = 0; }

    pub fn set_field300(&mut self, v: u64) { self.field300 = v; }
}
